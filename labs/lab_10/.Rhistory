x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2))
sum(aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2)))
summary(aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2)))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2))
agg_resids= aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2))
str(agg_resids)
agg_resids_test = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
str(agg_resids_test)
agg_resids_test = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x)^2)
str(agg_resids_test)
View(agg_resids_test)
sum((rope$p.cut - mean(rope$p.cut))^2)
ss_tot = sum((rope$p.cut - mean(rope$p.cut))^2)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) ((sum(x) - mean(x))^2))
agg_resids= aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) ((sum(x) - mean(x))^2))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (mean(x))^2)
str(agg_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum((x) - mean(x))^2)))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum((x) - mean(x))^2))
ss_tot = sum((rope$p.cut - mean(rope$p.cut))^2)
sum((rope$p.cut - mean(rope$p.cut))^2)
sum((mean(rope$p.cut) - rope$p.cut)^2)
sum((rope$p.cut - mean(rope$p.cut))^2)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
agg_resids_test = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (mean(x))^2)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (mean(x))
aggregate(
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
str(agg_resids)
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
str(agg_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x - mean(x)))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) )
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
x = rope$p.cut
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
x = rope$p.cut,
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) - mean(x))
str(agg_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = (x) - mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function((x) - mean(x)))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = sum(x) - mean(x)))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(x) - mean(x)))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(x) - mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = sum(x) - mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (x) - mean(x))
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (x) - mean(x))
str(agg_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) ((sum((x) - mean(x))^2)))
str(agg_sum_sq_resids)
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) ((sum((x) - mean(x))^2)))
str(agg_sum_sq_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) ((sum(x) - mean(x))^2))
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) ((sum(x) - mean(x))^2))
str(agg_sum_sq_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2))
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (sum(x) - mean(x)^2))
str(agg_sum_sq_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(x) - mean(x)^2)
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(x) - mean(x)^2)
str(agg_sum_sq_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum((x) - mean(x)^2))
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum((x) - mean(x)^2))
str(agg_sum_sq_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(((x) - mean(x))^2))
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(((x) - mean(x))^2))
str(agg_sum_sq_resids)
sum((rope$p.cut - mean(rope$p.cut)^2))
View(agg_sum_sq_resids)
sum(agg_sum_sq_resids$x)
df_within = n_obs- 6
ss_tot - ss_within
ss_within = sum(agg_sum_sq_resids$x)
ss_tot - ss_within
ss_among = ss_tot - ss_within
rope.type-1
rope$rope.type-1
sum(summary(rope$rope.type))
length(unique(rope$rope.type))
n_groups = length(unique(rope$rope.type))
df_among = n_groups-1
n_obs- n_groups
df_within = n_obs- n_groups
df_among = n_groups-1
ms_among  = ss_among / df_among
ms_within = ss_within / df_within
ms_among/ms_within
f_ratio = ms_among/ms_within
f_ratio = ms_among/ms_within
pf(f_ratio, 5, 115)
ss_among/ss_within
pf(ss_among/ss_within, 5, 115)
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1$"Sum Sq"
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
mtext("Rope Type", side = 1, line = 3)
fit_rope_2 = lm(p.cut ~ rope.type, data=rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
round(rope2_hsd$rope.type, digits = 4)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
str(anova_fit_1)
anova_fit_1$"Sum Sq"
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
mtext("Rope Type", side = 1, line = 3)
fit_rope_2 = lm(p.cut ~ rope.type, data=rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
round(rope2_hsd$rope.type, digits = 4)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
f_pval = pf(f_ratio, 5, 115)
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
pf(f_ratio, 5, 115)
pf(f_ratio, 115, 5)
f_pval = pf(f_ratio, 115, 5)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
pf(f_ratio, df_among, df_within)
f_pval = pf(f_ratio, df_among, df_within)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
pf(ms_among/ms_within, df_among, df_within)
pf(f_ratio, df_among, df_within)
f_pval = pf(f_ratio, df_among, df_within,
lower.tail = FALSE)
pf(f_ratio, df_among, df_within,
lower.tail = FALSE)
f_pval = pf(f_ratio, df_among, df_within,
lower.tail = FALSE)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
sum(agg_sum_sq_resids$x)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum(((x) - mean(x))^2))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
ss_within = sum(agg_sum_sq_resids$x)
sum(agg_sum_sq_resids$x)
bartlett.test( x = rope$p.cut,
g = list(rope$rope.type))
bartlett.test( x = rope$p.cut,
list(rope$rope.type))
list(rope$rope.type)
x = rope$p.cut
rope$p.cut
factor(rope$rope.type)
rope$rope.type
bartlett.test(rope$p.cut,
rope$rope.type)
bartlett.test(rope$p.cut,
list(rope$rope.type))
rope$rope.type
rope$p.cut
bartlett.test(p.cut ~ rope.type, data= rope)
fit_rope_1 = lm(p.cut ~ rope.type, data = rope)
summary(fit_rope_1)
residuals(fit_rope_1)
summary(fit_rope_1)
shapiro.test(residuals(fit_rope_1))
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (x) - mean(x))
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (x) - mean(x))
shapiro.test(agg_resids$x)
View(agg_resids)
agg_resids$BLAZE
agg_resids_BLAZE = subset(agg_resids, ==BLAZE)
subset(agg_resids == BLAZE)
subset(agg_resids == "BLAZE")
subset(agg_resids, !== "BLAZE")
subset(agg_resids, != "BLAZE")
subset(agg_resids, ! = "BLAZE")
subset(agg_resids, c(1))
agg_resids[1,]
agg_resids_BLAZE = agg_resids[1,]
View(agg_resids_BLAZE)
#     Question 10
shapiro.test(agg_resids_BLAZE)
shapiro.test(agg_resids_BLAZE$x)
sapply(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = residuals(x))
sapply(
x = rope$p.cut,
list(rope$rope.type),
FUN = residuals(x))
sapply(
x = rope$p.cut,
rope$rope.type,
FUN = residuals(x))
sapply(p.cut ~ rope.type, data= rope,
FUN = residuals(x))
View(agg_resids)
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) (x) - mean(x))
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
View(pen_fem)
boxplot(body_mass_g ~ species, data= pen_fem)
boxplot(body_mass_g ~ species, data= pen_fem,
xlab= "Species",
ylab = "Body Mass",
Main= "Body Mass Conditioned on Species")
boxplot(body_mass_g ~ species, data= pen_fem,
xlab= "Species",
ylab = "Body Mass",
Main= "Body Mass Conditioned on Species")
bartlett.test(body_mass_g ~ species, data= pen_fem)
fit_pen_1 = lm(body_mass_g ~ species, data= pen_fem)
summary(fit_pen_1)
shapiro.test(residuals(fit_rope_1))
shapiro.test(residuals(fit_pen_1))
TukeyHSD(aov(fit_pen_1))
