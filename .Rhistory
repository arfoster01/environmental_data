hist(dat_fl$DBH_in, main = "Histogram of DBH",
xlab = "DBH (inches)")
plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft,
main= "DBH andd Tree Height",
xlab= "DBH (inches)",
ylab = "Tree Height (feet)")
hist(dat_fl$DBH_in, main = "Histogram of DBH",
xlab = "DBH (inches)")
barplot(dat_fl$ProbabilityofFailure)
barplot(dat_fl$ProbabilityofFailure,
main = "Probability of Failure for Each Tree",
xlab = "Trees"
ylab = "Probability of Failure")
barplot(dat_fl$ProbabilityofFailure,
main = "Probability of Failure for Each Tree",
xlab = "Trees",
ylab = "Probability of Failure")
table(dat_fl$Failure_Standardized,
dnn = "none" "whole" "branch")
table(dat_fl$Failure_Standardized,
dnn = "none", "whole", "branch")
table(dat_fl$Failure_Standardized,
dnn = "none")
table(dat_fl$Failure_Standardized)
table_FS = table(dat_fl$Failure_Standardized)
barplot(table_FS)
barplot(table_FS, main = "Failure Standardized",
ylab = "Frequency")
table(dat_fl$ProbabilityofFailure)
table_PF = table(dat_fl$ProbabilityofFailure)
barplot(table_PF,
main = "Probability of Failure")
barplot(table_PF,
main = "Probability of Failure",
ylab= "Frequency")
barplot(table_PF,
main = "Probability of Failure",
ylab= "Frequency",
xlab = "Probability of Failure Class")
barplot(table_FS, main = "Failure Standardized",
ylab = "Frequency")
hist(dat_fl$DBH_in, main = "Histogram of DBH",
xlab = "DBH (inches)")
plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft,
main= "DBH andd Tree Height",
xlab= "DBH (inches)",
ylab = "Tree Height (feet)")
barplot(table_PF,
main = "Probability of Failure",
ylab= "Frequency",
xlab = "Probability of Failure Class")
barplot(table_FS, main = "Failure Standardized",
ylab = "Frequency",
xlab = "Failure Class")
hist(dat_fl$DBH_in, main = "Histogram of DBH",
xlab = "DBH (inches)")
plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft,
main= "DBH andd Tree Height",
xlab= "DBH (inches)",
ylab = "Tree Height (feet)")
ks.test(table_FS, table_PF)
table_PF = table(dat_fl$ProbabilityofFailure)
table_PF
table_FS
ks.test(table_FS, dat_fl$DBH_in)
subset(dat_fl, Failure_Standardized != "none")
setup = subset(dat_fl, Failure_Standardized != "none")
dat_fl_Whole= subset(setup, Failure_Standardized != "branch")
View(dat_fl_Whole)
dat_fl_Branch = subset(setup, Failure_Standardized != "whole")
View(dat_fl_Branch)
setup_2 = subset(dat_fl, Failure_Standardized != "branch")
View(setup_2)
View(setup_2)
dat_fl_None = subset(setup_2, Failure_Standardized != "whole")
View(dat_fl_None)
ks.test(dat_fl_Whole, dat_fl$DBH_in)
ks.test(dat_fl_Whole$Failure_Standardized, dat_fl$DBH_in)
ks.test(table_FS, dat_fl$DBH_in)
ks.test(dat_fl_Whole$Failure_Standardized, dat_fl_Branch$Failure_Standardized)
ks.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)
cor.test(
dat_fl$DBH_in,
dat_fl$HeighttoTop_ft,
use='complete.obs')
dat_fl$fail = factor(dat_fl$Failure_Standardized != "none")
levels(dat_fl$fail) = c("No Fail", "Fail")
fl_table_2 = table(
dat_fl$ProbabilityofFailure,
dat_fl$fail)
fl_table_2
chisq.test(fl_table_2)
fl_table_2
chisq_fl = chisq.test(fl_table_2)
round(chisq_fl$expected, 1)
chisq_fl$observed
round(chisq_fl$observed - chisq_fl$expected,
digits = 1)
require(here)
read.csv(here("data", "catrate.csv"))
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
summary(catrate)
hist(catrate$cat.rate)
shapiro.test(catreat$cat.rate)
shapiro.test(catrate$cat.rate)
t.test(catrate$cat.rat, mu= 0.28)
t.test(catrate$cat.rat, mu= 0.54)
t.test(catrate$cat.rat, mu= 0.28)
t.test(catrate$cat.rat, mu= 0.28)
t.test(catrate$cat.rat, mu= 0.28)
t.test(catrate$cat.rat, mu= 0.54)
t.test(catrate$cat.rat, mu= 0.28)
t.test(catrate$cat.rat, mu= 0)
t.test(catrate$cat.rat, mu= 0.28,
alternative = c("one.sided", "less"))
t.test(catrate$cat.rat, mu= 0.28,
alternative = c("one.sided", "greater"))
t.test(catrate$cat.rat, mu= 0.28)
t.test(catrate$cat.rate, mu= 0.28)
View(catrate)
t.test(catrate$cat.rate, mu= 0.28,
alernative = "greater")
t.test(catrate$cat.rate, mu= 0.28,
alernative = "less")
t.test(catrate$cat.rate, mu= 2/7)
t.test(catrate$cat.rate, mu= 2/7,
alernative = "greater")
wilcox.test(catrate$cat.rate, mu = 2 / 7)
t.test(catrate$cat.rate, mu= 2/7,
alernative = "less")
require(palmerpenguins)
penguin_dat = droplevels(subset(penguins, species != "Gentoo"))
summary(penguin_dat)
boxplot(
flipper_length_mm ~ species,
data = penguin_dat,
ylab = "Flipper Length (mm)")
View(penguin_dat)
dat_adelie = subset(penguin_dat, species == "Adelie")
dat_chinstrap = subset(penguin_dat, species == "Chinstrap")
View(dat_adelie)
View(dat_chinstrap)
shapiro.test(dat_adelie$flipper_length_mm)
shapiro.test(dat_chinstrap$flipper_length_mm)
t.test(flipper_length_mm ~ species,
data = penguin_dat)
wilcox.test(flipper_length_mm ~ species,
data = penguin_dat)
levels(penguin_dat$species)
hist(catrate$cat.rate)
hist(catrate$cat.rate,
main= "Histogram of Salamander Reproduction Catastrophic Rates",
ylab= "Reproduction Catastrophic Rates")
hist(catrate$cat.rate,
main= "Histogram of Salamander Reproduction Catastrophic Rates",
xlab= "Reproduction Catastrophic Rates")
hist(catrate$cat.rate,
main= "Histogram of Salamander
Reproduction Catastrophic Rates",
xlab= "Reproduction Catastrophic Rates")
shapiro.test(catrate$cat.rate)
t.test(catrate$cat.rate, mu= 2/7)
wilcox.test(catrate ~ cat.rate,
data = catrate)
wilcox.test(catrate ~ cat.rate,
data = catrate)
wilcox.test(catrate$cat.rate)
wilcox.test(catrate$cat.rate, mu= 2/7)
shapiro.test(dat_adelie$flipper_length_mm)
shapiro.test(dat_chinstrap$flipper_length_mm)
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap Flipper Lengths",
xlab= "Flipper Length (mm)")
Plot(
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
par(mfrow=c(1,2))
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(2,1))
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie
Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap
Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
dev.new(width= 50, height= 50, unit= "in")
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie
Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap
Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
dev.new(width= 100, height= 100, unit= "in")
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie
Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap
Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
dev.new(width= 100, height= 50, unit= "in")
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Adelie
Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Chinstrap
Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
par(mfrow=c(1,2))
dev.new(width= 100, height= 50, unit= "in")
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)")
par(mfrow=c(1,2))
dev.new(width= 100, height= 50, unit= "in")
hist(dat_adelie$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main= "Histogram of Penguin Flipper Lengths",
xlab= "Flipper Length (mm)",
add= TRUE)
View(penguin_dat)
t.test(flipper_length_mm ~ species,
data = penguin_dat)
require(here)
dat_ginko = read.csv(here("data", "ginko_data_2022.csv"))
require(here)
dat_ginkgo = read.csv(here("data", "ginkgo_data_2022.csv"))
View(dat_ginkgo)
seed_site = subset(
unique(
dat_ginkgo == seeds_present, site_id))
seed_site = subset(
unique(
dat_ginkgo == site_id))
seed_site = subset(
dat_ginkgo
)
View(seed_site)
seed_site = subset(
dat_ginkgo == seeds_present
)
seed_site = subset(
dat_ginkgo == col(1:2)
)
require(here)
read.csv(here("data", "rope.csv"))
require(here)
rope = read.csv(here("data", "rope.csv"))
View(rope)
rm(list = ls())
require(here)
rope = read.csv(here("data", "rope.csv"))
factor(rope, rope.type)
factor(rope$rope.type)
rope$rope.type = factor(rope$rope.type)
levels(rope$rope.type)
rope$rope.type
rope$rope.type
rope$rope.type
grouping(rope$rope.type)
count.fields(rope$rope.type)
count(rope$rope.type)
sum(rope$rope.type)
summary(rope$rope.type)
sum(summary(rope$rope.type))
rope$rope.type = factor(rope$rope.type)
n_obs = sum(summary(rope$rope.type))
rope$rope.type
sum(rope$rope.type, "Levels")
summary(rope$rope.type, "Levels")
uniqueN(rope$rope.type)
aggregate(rope$rope.type)
count(rope$rope.type)
count.fields(rope$rope.type)
aggregate(rope.type)
aggregate(rope$rope.type)
aggregate(rope$rope.type, FUN= length)
aggregate(rope,
FUN= length,
by= list(rope$rope.type))
aggregate(rope,
FUN= length,
by= count(rope$rope.type))
sum(list(rope$rope.type))
sum(summary(rope$rope.type))
summary(rope$rope.type)
summary(rope$rope.type)
summary(sum(rope$rope.type))
summary(rope$rope.type, "BLAZE")
summary(rope$rope.type,
names("BLAZE", "BS", "PI", "SB", "VEL", "XTC"))
summary(rope$rope.type,
names("BLAZE"))
library(dplyr)
ncol(rope$rope.type)
nrow(rope$rope.type)
length(rope$rope.type)
length(rope$rope.type, na.rm = TRUE)
length(unique(rope$rope.type))
n_groups = length(unique(rope$rope.type))
mean(rope)
mean(rope$rope.type)
model = lm(rope.type ~ p.cut, data = rope)
View(model)
summary(model)
Call:
lm(formula = rope.type ~ p.cut, data = rope)
mean(p.cut)
mean(rope$p.cut)
mean_p.cut = mean(rope$p.cut)
model = lm(mean_p.cut ~ p.cut, data = rope)
model = lm(mean_p.cut, rope$p.cut)
grand_mean = mean(rope$p.cut)
model = lm(grand_mean ~ rope$p.cut)
model = lm(rope$p.cut, grand_mean)
model = lm(p.cut, data= rope, grand_mean)
model = lm(rope$p.cut, data= rope, grand_mean)
model = lm(grand_mean ~ rope$p.cut, data= rope)
summary(model)
model = lm(grand_mean ~ rope$p.cut, data= rope)
require(here)
read.csv(here("data", "bird.sub.csv"))
read.csv(here("data", "hab.sub.csv"))
bird = read.csv(here("data", "bird.sub.csv"))
hab = read.csv(here("data", "hab.sub.csv"))
bird_hab = merge(bird, hab)
View(bird_hab)
View(bird)
View(hab)
birdhab = merge(bird, hab)
require(here)
bird = read.csv(here("data", "bird.sub.csv"))
hab = read.csv(here("data", "hab.sub.csv"))
birdhab = merge(bird, hab)
dim(birdhab)
plot(birdhab$BRCR, birdhab$ls,
xlab = "Late-Succesional Forest Extent",
ylab = "Brown Creeper Abundance")
lm(BRCR ~ ls, data = birdhab)
fit_1 = lm(BRCR ~ ls, data = birdhab)
plot(birdhab$BRCR, birdhab$ls,
xlab = "Late-Succesional Forest Extent",
ylab = "Brown Creeper Abundance",
abline(fit_1))
summary(fit_1)
y_int = function(x, y, m){
b <- mean(y) - (m * mean(x))
return(b)
}
slope = function(x, y){
return(cov(x, y)/var(x))
slope = function(x, y){
return(cov(x, y)/var(x))
return(cov(x, y)/var(x))
return(cov(x, y)/var(x))
slope = function(x, y){
return(cov(x, y)/var(x))
slope = function(x, y){
return(cov(x, y)/var(x))
slope = function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
linear = function(x, y_int, slope)
linear = function(x, y_int, slope)
linear(x, y_int, slope)
linear(x, y_int, slope)
linear(x = 1, y_int = 1, slope = 1)
linear(x = 1, y_int(1), slope = 1)
slope = function(x, y, m){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
slope = function(x, y){
return(cov(x, y)/var(x))
}
return(cov(x, y)/var(x)
slope = function(x, y){
slope = function(x, y){
return(cov(x, y)/var(x))
}
slope = function(x, y){
return(cov(x, y)/var(x))
}
x = birdhab
y_int = function(x, y, m){
b <- mean(y) - (m * mean(x))
return(b)
}
slope = function(x, y){
return(cov(x, y)/var(x))
}
linear = function(x, y_int, slope)
linear = function(slope*x + y_int)
linear = function(slope * x + y_int)
linear = function((slope * x) + y_int)
linear = function(y= slope * x + y_int)
linear(x=1, y_int= 1, slope=1)
View(linear)
linear(x=3:5, y_int= 1, slope=1)
x = n
slope = lm(x ~ y_int)
slope = lm(x ~ y)
require(here)
bird = read.csv(here("data", "bird.sub.csv"))
hab = read.csv(here("data", "hab.sub.csv"))
birdhab = merge(bird, hab)
dim(birdhab)
#Brown creeper BRCR, Late successional forest ls
plot(birdhab$BRCR, birdhab$ls,
xlab = "Late-Succesional Forest Extent",
ylab = "Brown Creeper Abundance")
fit_1 = lm(BRCR ~ ls, data = birdhab)
summary(fit_1)
plot(birdhab$BRCR, birdhab$ls,
xlab = "Late-Succesional Forest Extent",
ylab = "Brown Creeper Abundance",
abline(fit_1))
linear = slope * x + y_int
linear = function(slope * x + y_int)
# Deterministic model: Linear Function
x
x <- c(Inf)
y_int <- function(x, y) mean(y) - slope(x, y) * mean(x)
slope <- function(x, y) cov(x, y) / var(x)
linear = slope * x + y_int
linear = function(slope * x + y_int)
linear(x=1, y_int=1, slope=1)
linear = function(slopex + y_int)
linear = function(x, y_int, slope)
linear(x=1, y_int=1, slope=1)
View(linear)
linear(x=3:5, y_int=1, slope=1)
linear = (function(x, y_int, slope))
linear(function(x, y_int, slope))
